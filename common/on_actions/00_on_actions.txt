on_actions = {
	on_startup = {
		effect = {
			every_country = {
				update_all_pop = yes
				HOUSE_init_parliament = yes
			}
			every_country = { 
				limit = {
					is_ai = no
				}
				add_to_array = { # It will automatically add the scope
					array = global.players
				}
			}
#	#######Set Up Marpac Executive Council#####
#	#add_to_array = { global.marpac_executive_array = ENG }
#	#add_to_array = { global.marpac_executive_array = GER }
#	#add_to_array = { global.marpac_executive_array = FRA }	
#	#add_to_array = { global.marpac_executive_array = USA }
#	#add_to_array = { global.marpac_executive_array = ITA }	
#	#add_to_array = { global.marpac_executive_array = SOV }		
		}
	}
	on_monthly_XXB = {
		effect = {
			if = {
				limit = {
					date > 1949.1.1
					date < 2000.1.1
				}
				set_variable = { global.number_of_commies = 0}
				set_variable = { global.number_of_democraties = 0}
				every_country = {
					limit = {
						has_government = communism
					}
					add_to_variable = { global.number_of_commies = 1}
				}
				every_country = {
					limit = {
						has_government = democratic
					}
					add_to_variable = { global.number_of_democraties = 1}
				}

			}
			if = {
				# Checks for if it is Janurary (Year of previous month is a different year of current year)
				limit = { NOT = { check_variable = { global.last_year = global.year } } }
				set_variable = { global.last_year = global.year }
				
				# KDE System (System that fires pre-determined events with specified dates)
				add_to_variable = { global.kde_counter = 1 }
				log = "0: [?global.year]"
				
				if = {
					limit = { check_variable = { global.kde_counter = 2 } }
					meta_effect = {
						text = {
							KDE_bi_yearly_event_fire_[ID] = yes
						}
						ID = "[?global.year]"
					}
					
					log = "1: [?global.year]"
					set_variable = { global.kde_counter = 0 }
				}
			}
		}
	}
	on_monthly = {
		
		effect = {
			predection_house = yes
			if = {
				limit = {
					check_variable = { ROOT.current_countryc < 0 }
					has_war = no
					is_faction_leader = yes
				}
			dismantle_faction = yes
			}			
			if = {
				limit = {
					OR = {
						has_decision = interplanetary_transfer_decision
						has_decision = martian_orbit_decision
					}
				}
				random_list = {
					30 = {
						modifier = {
							factor = 0.5
							check_variable = { life_support_test_count > 5}
						}
						modifier = {
							factor = 0.1
							check_variable = { life_support_test_count > 7}
						}
						#RIP, accident happen

						random_list = {
							50 = {
								#decompression
								country_event = {
									id = space_race.12
								}
							}
							50 = {
								#signal lost
								country_event = {
									id = space_race.13
								}
							}
							50 = {
								#fire
								country_event = {
									id = space_race.14
								}
							}
						}
					}

					70 = {

					}
				}
			}
			if = {
				# Checks for if it is Janurary (Year of previous month is a different year of current year)
				limit = { NOT = { check_variable = { global.last_year = global.year } } }
					
				set_variable = { global.last_year = global.year }

				every_character = {
					limit = {
						has_character_flag = recruited_unit_leader
					}
					if = {
						limit = {
							check_variable = {
								years_of_service < 1
							}
						}
						set_variable_to_random = {
    						var = days_before_retire
							min = 0
    						max = 360
    						integer = yes
						}
						unit_leader_event = { id = generic.206 days = var:THIS.days_before_retire}
					}
					subtract_from_variable = { years_of_service = 1 }
					log = "[THIS.GetName] number of years remaining: [?THIS.years_of_service]"
				}
			}
		}
	}
on_monthly = {
	effect = {
		
		if = {
			limit = {
				is_faction_leader = yes
				has_war = no
			}
			set_variable = { ROOT.current_countrya = root.num_faction_members }
			divide_variable = { ROOT.current_countrya = 2}
			subtract_from_variable = {ROOT.current_countryc = ROOT.current_countrya }
		}
if = {
	limit = {
		country_exists = CHI
		NOT = {
			country_exists = QIN
		}	
	}

329 = { 
    owner = {
            set_variable = { QIN.color_array^1 = THIS }
        }
    }		

1016 = { 
    owner = {
            set_variable = { QIN.color_array^2 = THIS }
        }
    }

1018 = { 
    owner = {
            set_variable = { QIN.color_array^3 = THIS }
        }
    }

761 = { 
    owner = {
            set_variable = { QIN.color_array^4 = THIS }
        }
    }

714 = { 
    owner = {
            set_variable = { QIN.color_array^5 = THIS }
        }
    }

717 = { 
    owner = {
            set_variable = { QIN.color_array^6 = THIS }
        }
    }

1024 = { 
    owner = {
            set_variable = { QIN.color_array^7 = THIS }
        }
    }
1026 = { 
    owner = {
            set_variable = { QIN.color_array^8 = THIS }
        }
    }
1026 = { 
    owner = {
            set_variable = { QIN.color_array^9 = THIS }
        }
    }
612 = { 
    owner = {
            set_variable = { QIN.color_array^10 = THIS }
        }
    }
1021 = { 
    owner = {
            set_variable = { QIN.color_array^11 = THIS } 
        }
    } 			
1015 = { 
    owner = {
            set_variable = { QIN.color_array^12 = THIS } 
        }
    } 		
618 = { 
    owner = {
            set_variable = { QIN.color_array^13 = THIS } 
        }
    }
287 = { 
    owner = {
            set_variable = { QIN.color_array^14 = THIS } 
        }
    }		
755 = { 
    owner = {
            set_variable = { QIN.color_array^15 = THIS } 
        }
    }	
616 = { 
    owner = {
            set_variable = { QIN.color_array^16 = THIS } 
        }
    }	
614 = { 
    owner = {
            set_variable = { QIN.color_array^17 = THIS } 
        }
    }	
761 = { 
    owner = {
            set_variable = { QIN.color_array^18 = THIS } 
        }
    }		
743 = { 
    owner = {
            set_variable = { QIN.color_array^19 = THIS } 
        }
    }	
607 = { 
    owner = {
            set_variable = { QIN.color_array^20 = THIS } 
        }
    }		

605 = { 
    owner = {
            set_variable = { QIN.color_array^21 = THIS } 
        }
    }	
322 = { 
    owner = {
            set_variable = { QIN.color_array^22 = THIS } 
        }
    }
757 = { 
    owner = {
            set_variable = { QIN.color_array^23 = THIS } 
        }
    }	
603 = { 
    owner = {
            set_variable = { QIN.color_array^24 = THIS } 
        }
    }		
602 = { 
    owner = {
            set_variable = { QIN.color_array^25 = THIS } 
		}
    }		
600 = { 
    owner = {
            set_variable = { QIN.color_array^26 = THIS } 
        }
    }	 
596 = { 
    owner = {
            set_variable = { QIN.color_array^27 = THIS } 
        }
    }	
595 = { 
    owner = {
            set_variable = { QIN.color_array^28 = THIS } 
        }
    }
728 = { 
    owner = {
            set_variable = { QIN.color_array^29 = THIS } 
        }
    }		
599 = { 
    owner = {
            set_variable = { QIN.color_array^30 = THIS } 
        }
    }
}			
	}
}	
	# country 
	on_daily = {
		effect = {
			update_all_pop  = yes
			add_to_variable = { spam_cooldownusa = 1 }
			subtract_from_variable = { UNcooldownunvotecountry = 1 }
			clamp_variable = {
				var = UNcooldownunvotecountry
				min = 0
			}
			update_wounded_veterians = yes
			if = {
				limit = {
					has_decision = QIN_smuggle_weapons
					
				}
				add_to_variable = {
					foreign_suspicion_level = 1
				}
				else_if = {
					limit = {
						NOT = {
							has_country_flag = investigations_underway
						}
					}
					add_to_variable = {
						foreign_suspicion_level = -0.5
					}
				}
			}
			if = {
				limit = {
					check_variable = {
						foreign_suspicion_level > 89.5
					}
				}
				set_country_flag = investigations_underway
				else = {
					clr_country_flag = investigations_underway
				}
			}
			clamp_variable = {
				var = foreign_suspicion_level
				min = 0
				max = 100
			}

		}
	}
	on_new_term_election = {
		effect = {
			
			if = {
				limit = { 
					tag = USA 
					NOT = {
						has_active_mission = USA_campaign_runs_new
						has_active_mission = USA_campaign_runs
					}
				}
				RON_handle_American_Elections = yes
			}
			else_if = {
				limit = {
					tag = FRA
					date < 1945.1.1
				}
				RON_handle_French_Elections = yes
			}
			else_if = {
				limit = { tag = ARG }
				RON_handle_Argentine_Elections = yes
			}
			else_if = {
				limit = {
					original_tag = SPR
					date > 1936.1.1
					date < 1936.3.3
				}
				
			}
			else = {
				country_event = { id = election.1 }
			}
		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace 
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace, 
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace, 
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# our ace is killed by no name
	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	# our ace died in accident
	# country, FROM = ace
	on_ace_killed_on_accident = {

	}

	# enemy ace is killed by our non name
	# country, FROM = enemy ace
	on_non_ace_killed_other_ace = {

	}
	# During justifying wargoals
	# triggered daily, so make sure there is a sink somewhere not firing events
	# country, FROM = target nation
	on_justifying_wargoal_pulse = {

		random_events = {
			100 = war_justification.1
			100 = war_justification.2
			100 = war_justification.3
			100 = war_justification.4
			100 = war_justification.5
			100 = war_justification.6
			100 = war_justification.7
			100 = war_justification.8
			100 = war_justification.9
			100 = war_justification.10
			100 = war_justification.11
			100 = war_justification.12
			100 = war_justification.13
			100 = war_justification.14
			100 = war_justification.15
			100 = war_justification.16
			100 = war_justification.17
			100 = war_justification.18
			100 = war_justification.19
			20000 = 0

		}
	}

	on_wargoal_expire = {
		random_events = {
			100 = war_justification.301
		}
	}

	on_nuke_drop = {

		effect = {
			set_global_flag = first_nuke_dropped
			if = {
				limit = { NOT = { has_global_flag = first_nuke_dropped } }
				country_event = { id = generic.8 }
			}
			if = {
				limit = { has_idea = race_for_the_bomb_outclassed }
				remove_ideas = race_for_the_bomb_outclassed
			}
			if = {
				limit = { NOT = { has_country_flag = achievement_has_dropped_nuke } }
				goto_state = FROM
				set_country_flag = achievement_has_dropped_nuke
			}
			if = {
				limit = {
					FROM = { state = 378 }
				}
				set_country_flag = achievement_has_nuked_california
			}
			if = {
				limit = {
					FROM = { is_core_of = AST }
				}
				set_country_flag = achievement_AST_nuke_self
			}
			if = {
				limit = {
					tag = SWE
					FROM = {
						is_owned_by = DEN
						is_core_of = DEN
					}
				}
				set_country_flag = achievement_med_plutonium
			}
			if = {
				limit = {
					OR = {
						has_tech = RON_Antimatter_Bomb
						has_tech = bba_strat_bombing_2060
						date > 2000.1.1
					}
				}
				FROM = {
					decrease_population_on_nuke = yes				
					set_demilitarized_zone = yes

				}

			}
			if = {
				limit = {
					FROM = {
						is_core_of = JAP
					}
					has_global_flag = JAP_nuke_1
					NOT = {
						has_global_flag = JAP_nuke_2
					}
				}
				set_global_flag = JAP_nuke_2
			}
			if = {
				limit = {
					FROM = {
						is_core_of = JAP
					}
					NOT = {
						has_global_flag = JAP_nuke_1
					}
				}
				set_global_flag = JAP_nuke_1
			}

			news_event = { id = nuke_dropped.2 days = 1 }
			news_event = { id = nuke_dropped.3 days = 1 }
			news_event = { id = nuke_dropped.4 days = 1 }
			news_event = { id = nuke_dropped.5 days = 1 }
			news_event = { id = nuke_dropped.6 days = 1 }
			news_event = { id = nuke_dropped.7 days = 1 }
			news_event = { id = nuke_dropped.8 days = 1 }
			news_event = { id = nuke_dropped.9 days = 1 }
			news_event = { id = nuke_dropped.10 days = 1 }
			news_event = { id = nuke_dropped.11 days = 1 }
			news_event = { id = nuke_dropped.12 days = 1 }
			news_event = { id = nuke_dropped.13 days = 1 }
		}
		random_events = {
			100 = nuke_dropped.0
			10000 = nuke_dropped.100
		}
	
	}
	# country random events
	#on_bi_yearly_pulse = {
	#
	#}

	#on_five_year_pulse = {
	#
	#}

	on_border_war_lost = {
	}

	on_leave_faction = {
	}

	#FROM is the one that joins the faction
	on_create_faction = {
		effect = {
			ROOT = {
				set_variable = { ROOT.current_countryc = 100 }
			}
		}				
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
	}

	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			ROOT = {
				set_variable = { ROOT.current_countryc = 100 }
			}
		}	
	
	}

	#FROM is war target
	on_declare_war = {
		effect = {
		ROOT = {
			if = {
				limit = {
					is_faction_leader = yes
				}
				subtract_from_variable = { ROOT.current_countryc = 10 }
				}
			}	
		}
	}

	# When a new faction is formed
	on_faction_formed = {
		effect = {
			news_event = { id = news.159 }
			ROOT = {
				set_variable = { ROOT.current_countryc = 100 }
			}
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
	 	# effect = {
	 	# 	### Naval transfers
	 	# 	if = {
	 	# 		limit = {
	 	# 			ROOT = {
	 	# 				is_mexican_revolution_tag = yes
	 	# 				is_in_faction = no
	 	# 			}
	 	# 			FROM = { is_mexican_revolution_tag = yes }
	 	# 		}
	 	# 		transfer_navy = { target = FROM }
	 	# 		#Border cleanup
	 	# 		FROM = {
	 	# 			annex_country = ROOT
	 	# 		}
	 	# 	}
	 	# }
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
				effect = {
ROOT = {
	if = {
		limit = {
			is_faction_leader = yes
		}
				 add_to_variable = { ROOT.current_countryc = 10 }
		}
	}

}		
	}

	on_government_change = {
				effect = {
ROOT = {
	if = {
		limit = {
			is_faction_leader = yes
		}
				 subtract_from_variable = { ROOT.current_countryc = 10 }
		}
	}

}
		}

	on_coup_succeeded = {
		effect = {
ROOT = {
	if = {
		limit = {
			is_faction_leader = yes
		}
				 subtract_from_variable = { ROOT.current_countryc = 10 }
		}
	}			
			#Turn elections on for democracies created from coup
			random_other_country = {
				limit = {
					has_government = democratic
					original_tag = ROOT
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}

	#ROOT is winner #FROM gets annexed - This will also fire on_annex
	on_civil_war_end_before_annexation = {

	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord

	on_puppet = {
				effect = {
ROOT = {
	if = {
		limit = {
			is_faction_leader = yes
		}
				 add_to_variable = { ROOT.current_countryc = 10 }
		}
	}

}				
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord

	on_release_as_puppet = {
				effect = {
ROOT = {
	if = {
		limit = {
			is_faction_leader = yes
		}
				 add_to_variable = { ROOT.current_countryc = 10 }
		}
	}

}				
	}

	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
				effect = {
ROOT = {
	if = {
		limit = {
			is_faction_leader = yes
		}
				 add_to_variable = { ROOT.current_countryc = 10 }
		}
	}

}				
	}

	#Not run on a specific country.
	on_startup = {
		effect = {
			every_country = {
				limit = {
					is_faction_leader = yes
				}
			set_variable = { ROOT.current_countryc = 100 }
			}
			if = {
				limit = {
					date > 1945.1.1
					date < 2000.1.1
				}
				set_variable = { GDP_real = 0}
				set_variable = { global.number_of_commies = 0}
				set_variable = { global.number_of_democraties = 0}
				every_country = {
					limit = {
						has_government = communism
					}
					add_to_variable = { global.number_of_commies = 1}
				}
				every_country = {
					limit = {
						has_government = democratic
					}
					add_to_variable = { global.number_of_democraties = 1}
				}

			}
			every_state = {
				limit = {
					is_core_of = MOR
				}
				remove_core_of = MOR
			}
			every_state = {
				limit = {
					is_core_of = USA
				}
				remove_core_of = UWA
				remove_core_of = KOA
				remove_core_of = SSA
				remove_core_of = JSA
			}
		}

	}
	on_unit_leader_created = {
		effect = {
			character = {
				set_character_flag = recruited_unit_leader
				set_variable_to_random = {
    				var = years_of_service
					min = 30
    				max = 35
    				integer = yes
				}
			}
		}
	}
	on_army_leader_promoted = {
		effect = {
			character = {
			
				add_to_variable = { years_of_service = 5 }
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
	}

	on_unit_leader_level_up = {
	}

	# From is owner country
	on_army_leader_daily = {
		effect = {
			if = {
				limit = {
					check_variable = { random < 0.02 }
					NOT = { has_trait = sick }
					set_temp_variable = { temp = sum_unit_terrain_modifier@sickness_chance }
					divide_temp_variable = { temp = num_units }
					check_variable = { temp > 0.75 }
					NOT = { has_unit_leader_flag = recently_sick }
				}
				add_timed_unit_leader_trait = {
					trait = sick
					days = 30
				}
				unit_leader_event = { id = generic.17 }
			}
		}
	}

	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.001 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}

	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					set_temp_variable = { chance = 0.005 }
					set_temp_variable = { factor = 1.0 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = { id = generic.18 }
			}
		}
	}

	on_army_leader_promoted = {
		effect = {
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}

	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started
	# on_naval_invasion = {
	# 	effect = {
	# 	}
	# }


	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
		effect = {
			set_country_flag = has_paradropped_flag
		}
	}
	on_ruling_party_change = {
		# temp var old_ideology_token is available for effects
		effect = {
			every_controlled_state = {
				limit = {
					has_resistance = yes
				}
				set_temp_variable = { new_compliance = compliance }
				multiply_temp_variable = { new_compliance = 0.5 }
				set_compliance = new_compliance
			}
		}
	}
}
